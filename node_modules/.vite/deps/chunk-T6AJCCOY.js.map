{
  "version": 3,
  "sources": ["../../@remix-run/router/history.ts", "../../@remix-run/router/utils.ts", "../../@remix-run/router/router.ts"],
  "sourcesContent": ["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n", "import type { Location, Path, To } from \"./history\";\nimport { warning, invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on <Form>,\n * useSubmit(), <fetcher.Form>, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: FormMethod | V7_FormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<Omit<R, ImmutableRouteKey>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  detectErrorBoundary: DetectErrorBoundaryFunction,\n  parentPath: number[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        hasErrorBoundary: detectErrorBoundary(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        hasErrorBoundary: detectErrorBoundary(route),\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          detectErrorBoundary,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        const starParam = params[star];\n\n        // Apply the splat\n        return starParam;\n      }\n\n      const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n\n        if (optional === \"?\") {\n          return param == null ? \"\" : param;\n        }\n\n        if (param == null) {\n          invariant(false, `Missing \":${key}\" param`);\n        }\n\n        return param;\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n", "import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  DataResult,\n  DeferredData,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  DetectErrorBoundaryFunction,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  ShouldRevalidateFunction,\n  RouteManifest,\n  ImmutableRouteKey,\n  ActionFunction,\n  LoaderFunction,\n  V7_MutationFormMethod,\n  V7_FormMethod,\n  HTMLFormMethod,\n  MutationFormMethod,\n} from \"./utils\";\nimport {\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_normalizeFormMethod: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  future?: FutureConfig;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | V7_FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod | V7_FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | V7_FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod | V7_FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n\nconst defaultDetectErrorBoundary = (route: AgnosticRouteObject) =>\n  Boolean(route.hasErrorBoundary);\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let detectErrorBoundary =\n    init.detectErrorBoundary || defaultDetectErrorBoundary;\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    detectErrorBoundary,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_normalizeFormMethod: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    !initialMatches.some((m) => m.route.lazy) &&\n    // And we have to either have no loaders or have been provided hydrationData\n    (!initialMatches.some((m) => m.route.loader) || init.hydrationData != null);\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              deleteBlocker(blockerKey!);\n              updateState({ blockers: new Map(router.state.blockers) });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    updateState({\n      ...newState, // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(\n        location,\n        newState.matches || state.matches\n      ),\n      preventScrollReset,\n      blockers: new Map(state.blockers),\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      to,\n      future,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          deleteBlocker(blockerKey!);\n          updateState({ blockers: new Map(state.blockers) });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a mutation submission\n    // For example, on /page#hash and submit a <Form method=\"post\"> which will\n    // default to a navigation to /page\n    if (\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        detectErrorBoundary,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        ...submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission || fetcherSubmission\n        ? submission || fetcherSubmission\n        : loadingNavigation.formMethod &&\n          loadingNavigation.formAction &&\n          loadingNavigation.formData &&\n          loadingNavigation.formEncType\n        ? {\n            formMethod: loadingNavigation.formMethod,\n            formAction: loadingNavigation.formAction,\n            formData: loadingNavigation.formData,\n            formEncType: loadingNavigation.formEncType,\n          }\n        : undefined;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      routesToUse,\n      init.basename,\n      pendingActionData,\n      pendingError\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState({\n        navigation: loadingNavigation,\n        ...(actionData\n          ? Object.keys(actionData).length === 0\n            ? { actionData: null }\n            : { actionData }\n          : {}),\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach((rf) =>\n      fetchControllers.set(rf.key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = matchRoutes(routesToUse, href, init.basename);\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: href })\n      );\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(\n      href,\n      future,\n      opts,\n      true\n    );\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      manifest,\n      detectErrorBoundary,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult, {\n        submission,\n        isFetchActionRedirect: true,\n      });\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      routesToUse,\n      init.basename,\n      { [match.route.id]: actionResult.data },\n      undefined // No need to send through errors since we short circuit above\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      manifest,\n      detectErrorBoundary,\n      router.basename\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      replace,\n      isFetchActionRedirect,\n    }: {\n      submission?: Submission;\n      replace?: boolean;\n      isFetchActionRedirect?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(\n      state.location,\n      redirect.location,\n      // TODO: This can be removed once we get rid of useTransition in Remix v2\n      {\n        _isRedirect: true,\n        ...(isFetchActionRedirect ? { _isFetchActionRedirect: true } : {}),\n      }\n    );\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n    // Check if this an absolute external redirect that goes to a new origin\n    if (\n      ABSOLUTE_URL_REGEX.test(redirect.location) &&\n      isBrowser &&\n      typeof window?.location !== \"undefined\"\n    ) {\n      let url = init.history.createURL(redirect.location);\n      let isDifferentBasename =\n        stripBasename(url.pathname, init.basename || \"/\") == null;\n\n      if (window.location.origin !== url.origin || isDifferentBasename) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType, formData } = state.navigation;\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData,\n      };\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      submission &&\n      isMutationMethod(submission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...submission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else if (isFetchActionRedirect) {\n      // For a fetch action redirect, we kick off a new loading navigation\n      // without the fetcher submission, but we send it along for shouldRevalidate\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        },\n        fetcherSubmission: submission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          detectErrorBoundary,\n          router.basename\n        )\n      ),\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match) {\n          return callLoaderOrAction(\n            \"loader\",\n            createClientSideRequest(init.history, f.path, request.signal),\n            f.match,\n            f.matches,\n            manifest,\n            detectErrorBoundary,\n            router.basename\n          );\n        } else {\n          let error: ErrorResult = {\n            type: ResultType.error,\n            error: getInternalRouterError(404, { pathname: f.path }),\n          };\n          return error;\n        }\n      }),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    state.blockers.set(key, newBlocker);\n    updateState({ blockers: new Map(state.blockers) });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    inFlightDataRoutes = newRoutes;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let detectErrorBoundary =\n    opts?.detectErrorBoundary || defaultDetectErrorBoundary;\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    detectErrorBoundary,\n    undefined,\n    manifest\n  );\n  let basename = (opts ? opts.basename : null) || \"/\";\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        detectErrorBoundary,\n        basename,\n        true,\n        isRouteRequest,\n        requestContext\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          detectErrorBoundary,\n          basename,\n          true,\n          isRouteRequest,\n          requestContext\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  future: FutureConfig,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  // Create a Submission on non-GET navigations\n  let submission: Submission | undefined;\n  if (opts.formData) {\n    let formMethod = opts.formMethod || \"get\";\n    submission = {\n      formMethod: future.v7_normalizeFormMethod\n        ? (formMethod.toUpperCase() as V7_FormMethod)\n        : (formMethod.toLowerCase() as FormMethod),\n      formAction: stripHashFromPath(path),\n      formEncType:\n        (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n      formData: opts.formData,\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return { path, submission };\n    }\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData);\n  // Since fetcher GET submissions only run a single loader (as opposed to\n  // navigation GET submissions which run all loaders), we need to preserve\n  // any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionData?: RouteData,\n  pendingError?: RouteData\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  let defaultShouldRevalidate =\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        defaultShouldRevalidate ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some((m) => m.route.id === f.routeId)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({ key, ...f, matches: null, match: null });\n      return;\n    }\n\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push({\n        key,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        ...f,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // hit a static href, so they _always_ check shouldRevalidate and the\n    // default is strictly if a revalidation is explicitly required (action\n    // submissions, useRevalidator, X-Remix-Revalidate).\n    let shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n      currentUrl,\n      currentParams: state.matches[state.matches.length - 1].params,\n      nextUrl,\n      nextParams: matches[matches.length - 1].params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        ...f,\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: Parameters<ShouldRevalidateFunction>[0]\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  detectErrorBoundary: DetectErrorBoundaryFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to detectErrorBoundary\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `detectErrorBoundary` function to set the `hasErrorBoundary` route\n    // property since the logic will differ between frameworks.\n    hasErrorBoundary: detectErrorBoundary({ ...routeToUpdate }),\n    lazy: undefined,\n  });\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  detectErrorBoundary: DetectErrorBoundaryFunction,\n  basename = \"/\",\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false,\n  requestContext?: unknown\n): Promise<DataResult> {\n  let resultType;\n  let result;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (handler: ActionFunction | LoaderFunction) => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    let abortPromise = new Promise((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([\n      handler({ request, params: match.params, context: requestContext }),\n      abortPromise,\n    ]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let values = await Promise.all([\n          runHandler(handler),\n          loadLazyRouteModule(match.route, detectErrorBoundary, manifest),\n        ]);\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, detectErrorBoundary, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname: new URL(request.url).pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, data: undefined };\n        }\n      }\n    } else {\n      invariant<Function>(\n        handler,\n        `Could not find the ${type} to run on the \"${match.route.id}\" route`\n      );\n\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(\n          (match) => match.pathnameBase\n        );\n        let resolvedLocation = resolveTo(\n          location,\n          routePathnames,\n          new URL(request.url).pathname\n        );\n        invariant(\n          createPath(resolvedLocation),\n          `Unable to resolve redirect location: ${location}`\n        );\n\n        // Prepend the basename to the redirect location if we have one\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname =\n            path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType, formData } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n"],
  "mappings": "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",
  "names": ["Action", "PopStateEventType", "createMemoryHistory", "options", "initialEntries", "initialIndex", "v5Compat", "entries", "map", "entry", "index", "createMemoryLocation", "state", "undefined", "clampIndex", "length", "action", "Pop", "listener", "n", "Math", "min", "max", "getCurrentLocation", "to", "key", "location", "createLocation", "pathname", "warning", "charAt", "JSON", "stringify", "createHref", "createPath", "history", "createURL", "URL", "encodeLocation", "path", "parsePath", "search", "hash", "push", "Push", "nextLocation", "splice", "delta", "replace", "Replace", "go", "nextIndex", "listen", "fn", "createBrowserHistory", "createBrowserLocation", "window", "globalHistory", "usr", "createBrowserHref", "getUrlBasedHistory", "createHashHistory", "createHashLocation", "substr", "createHashHref", "base", "document", "querySelector", "href", "getAttribute", "url", "hashIndex", "indexOf", "slice", "validateHashLocation", "invariant", "value", "message", "Error", "cond", "console", "warn", "e", "createKey", "random", "toString", "getHistoryState", "idx", "current", "parsedPath", "searchIndex", "getLocation", "validateLocation", "defaultView", "getIndex", "replaceState", "handlePop", "historyState", "pushState", "error", "assign", "origin", "addEventListener", "removeEventListener", "ResultType", "immutableRouteKeys", "Set", "isIndexRoute", "route", "convertRoutesToDataRoutes", "routes", "detectErrorBoundary", "parentPath", "manifest", "treePath", "id", "join", "children", "indexRoute", "hasErrorBoundary", "pathOrLayoutRoute", "matchRoutes", "locationArg", "basename", "stripBasename", "branches", "flattenRoutes", "rankRouteBranches", "matches", "i", "matchRouteBranch", "safelyDecodeURI", "parentsMeta", "flattenRoute", "relativePath", "meta", "caseSensitive", "childrenIndex", "startsWith", "joinPaths", "routesMeta", "concat", "score", "computeScore", "forEach", "includes", "exploded", "explodeOptionalSegments", "segments", "split", "first", "rest", "isOptional", "endsWith", "required", "restExploded", "result", "subpath", "sort", "a", "b", "compareIndexes", "paramRe", "dynamicSegmentValue", "indexRouteValue", "emptySegmentValue", "staticSegmentValue", "splatPenalty", "isSplat", "s", "initialScore", "some", "filter", "reduce", "segment", "test", "siblings", "every", "branch", "matchedParams", "matchedPathname", "end", "remainingPathname", "match", "matchPath", "Object", "params", "pathnameBase", "normalizePathname", "generatePath", "originalPath", "prefix", "array", "isLastSegment", "star", "starParam", "keyMatch", "optional", "param", "pattern", "matcher", "paramNames", "compilePath", "captureGroups", "memo", "paramName", "splatValue", "safelyDecodeURIComponent", "regexpSource", "_", "RegExp", "decodeURI", "decodeURIComponent", "toLowerCase", "startIndex", "nextChar", "resolvePath", "fromPathname", "toPathname", "resolvePathname", "normalizeSearch", "normalizeHash", "relativeSegments", "pop", "getInvalidPathError", "char", "field", "dest", "getPathContributingMatches", "resolveTo", "toArg", "routePathnames", "locationPathname", "isPathRelative", "isEmptyPath", "from", "routePathnameIndex", "toSegments", "shift", "hasExplicitTrailingSlash", "hasCurrentTrailingSlash", "getToPathname", "paths", "json", "data", "init", "responseInit", "status", "headers", "Headers", "has", "set", "Response", "AbortedDeferredError", "DeferredData", "constructor", "pendingKeysSet", "subscribers", "deferredKeys", "Array", "isArray", "reject", "abortPromise", "Promise", "r", "controller", "AbortController", "onAbort", "unlistenAbortSignal", "signal", "acc", "trackPromise", "done", "add", "promise", "race", "then", "onSettle", "catch", "defineProperty", "get", "aborted", "delete", "emit", "settledKey", "subscriber", "subscribe", "cancel", "abort", "v", "k", "resolveData", "resolve", "size", "unwrappedData", "unwrapTrackedPromise", "pendingKeys", "isTrackedPromise", "_tracked", "_error", "_data", "defer", "redirect", "ErrorResponse", "statusText", "internal", "isRouteErrorResponse", "validMutationMethodsArr", "validMutationMethods", "validRequestMethodsArr", "validRequestMethods", "redirectStatusCodes", "redirectPreserveMethodStatusCodes", "IDLE_NAVIGATION", "formMethod", "formAction", "formEncType", "formData", "IDLE_FETCHER", "IDLE_BLOCKER", "proceed", "reset", "ABSOLUTE_URL_REGEX", "isBrowser", "createElement", "isServer", "defaultDetectErrorBoundary", "Boolean", "createRouter", "dataRoutes", "inFlightDataRoutes", "future", "v7_normalizeFormMethod", "unlistenHistory", "savedScrollPositions", "getScrollRestorationKey", "getScrollPosition", "initialScrollRestored", "hydrationData", "initialMatches", "initialErrors", "getInternalRouterError", "getShortCircuitMatches", "initialized", "m", "lazy", "loader", "router", "historyAction", "navigation", "restoreScrollPosition", "preventScrollReset", "revalidation", "loaderData", "actionData", "errors", "fetchers", "Map", "blockers", "pendingAction", "HistoryAction", "pendingPreventScrollReset", "pendingNavigationController", "isUninterruptedRevalidation", "isRevalidationRequired", "cancelledDeferredRoutes", "cancelledFetcherLoads", "fetchControllers", "incrementingLoadId", "pendingNavigationLoadId", "fetchReloadIds", "fetchRedirectIds", "fetchLoadMatches", "activeDeferreds", "blockerFunctions", "ignoreNextHistoryUpdate", "initialize", "blockerKey", "shouldBlockNavigation", "currentLocation", "updateBlocker", "deleteBlocker", "updateState", "startNavigation", "dispose", "clear", "deleteFetcher", "newState", "completeNavigation", "isActionReload", "isMutationMethod", "_isRedirect", "keys", "mergeLoaderData", "getSavedScrollPosition", "navigate", "opts", "submission", "normalizeNavigateOptions", "userReplace", "pendingError", "revalidate", "interruptActiveLoads", "startUninterruptedRevalidation", "overrideNavigation", "saveScrollPosition", "routesToUse", "loadingNavigation", "notFoundMatches", "cancelActiveDeferreds", "isHashChangeOnly", "request", "createClientSideRequest", "pendingActionData", "findNearestBoundary", "actionOutput", "handleAction", "shortCircuited", "pendingActionError", "Request", "handleLoaders", "fetcherSubmission", "actionMatch", "getTargetMatch", "type", "method", "routeId", "callLoaderOrAction", "isRedirectResult", "startRedirectNavigation", "isErrorResult", "boundaryMatch", "isDeferredResult", "activeSubmission", "matchesToLoad", "revalidatingFetchers", "getMatchesToLoad", "rf", "fetcher", "revalidatingFetcher", "results", "loaderResults", "fetcherResults", "callLoadersAndMaybeResolveData", "findRedirect", "processLoaderData", "deferredData", "markFetchRedirectsDone", "didAbortFetchLoads", "abortStaleFetchLoads", "getFetcher", "fetch", "abortFetcher", "setFetcherError", "handleFetcherAction", "handleFetcherLoader", "requestMatches", "existingFetcher", "abortController", "fetchRequest", "actionResult", "loadingFetcher", "isFetchActionRedirect", "revalidationRequest", "loadId", "loadFetcher", "staleKey", "doneFetcher", "resolveDeferredData", "redirectLocation", "_isFetchActionRedirect", "isDifferentBasename", "redirectHistoryAction", "currentMatches", "fetchersToLoad", "all", "f", "resolveDeferredResults", "markFetchersDone", "doneKeys", "landedId", "yeetedKeys", "getBlocker", "blocker", "newBlocker", "blockerFunction", "predicate", "cancelledRouteIds", "dfd", "enableScrollRestoration", "positions", "getPosition", "getKey", "y", "userMatches", "createUseMatchesMatch", "_internalSetRoutes", "newRoutes", "_internalFetchControllers", "_internalActiveDeferreds", "UNSAFE_DEFERRED_SYMBOL", "Symbol", "createStaticHandler", "query", "requestContext", "isValidMethod", "methodNotAllowedMatches", "statusCode", "loaderHeaders", "actionHeaders", "queryImpl", "isResponse", "queryRoute", "find", "values", "routeMatch", "submit", "loadRouteData", "isQueryRouteResponse", "isRedirectResponse", "response", "isRouteRequest", "Location", "context", "loaderRequest", "getLoaderMatchesUntilBoundary", "processRouteLoaderData", "executedLoaders", "fromEntries", "getStaticContextFromError", "newContext", "_deepestRenderedBoundaryId", "isSubmissionNavigation", "isFetcher", "toUpperCase", "stripHashFromPath", "searchParams", "convertFormDataToSearchParams", "hasNakedIndexQuery", "append", "boundaryId", "boundaryMatches", "findIndex", "currentUrl", "nextUrl", "defaultShouldRevalidate", "navigationMatches", "isNewLoader", "currentRouteMatch", "nextRouteMatch", "shouldRevalidateLoader", "currentParams", "nextParams", "isNewRouteInstance", "fetcherMatches", "fetcherMatch", "shouldRevalidate", "currentLoaderData", "currentMatch", "isNew", "isMissingData", "currentPath", "loaderMatch", "arg", "routeChoice", "loadLazyRouteModule", "lazyRoute", "routeToUpdate", "routeUpdates", "lazyRouteProperty", "staticRouteValue", "isPropertyStaticallyDefined", "isStaticRequest", "resultType", "onReject", "runHandler", "handler", "activeMatches", "resolvedLocation", "protocol", "isSameBasename", "contentType", "text", "isDeferredData", "deferred", "body", "URLSearchParams", "File", "name", "foundError", "newLoaderData", "mergedLoaderData", "hasOwnProperty", "eligibleMatches", "reverse", "errorMessage", "obj", "isRevalidatingLoader", "unwrap", "getAll", "handle", "pathMatches"]
}
